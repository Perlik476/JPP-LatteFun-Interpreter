int head([(int) -> int] list) {
    return list(0);
}

[(int) -> int] tail([(int) -> int] list) {
    return lambda (int n) -> [(int) -> int] . list(n + 1);
}

int length([(int) -> int] list) {
    int i = 0;
    while (true) {
        if (list(i) == 0) {
            return i;
        }
        i++;
    }
}

[(int) -> int] zeros() {
    return lambda (int n) -> int . 0;
}

[(int) -> int] add(int x, [(int) -> int] list) {
    return lambda (int n) -> int {
        if (n == 0) {
            return x;
        }
        else { 
            return list(n - 1);
        }
    };
}

[(int) -> int] concat([(int) -> int] list1, [(int) -> int] list2) {
    return lambda (int n) -> int {
        if (n < length(list1)) {
            return list1(n);
        }
        else {
            return list2(n - length(list1));
        }
    };
}

void printList([(int) -> int] list) {
    print("[");
    int i = 0;
    while (true) {
        if (list(i) == 0) {
            print("]");
            return;
        }
        if (i != 0) {
            print(", ");
        }
        print(list(i));
        i++;
    }
}

void printlnList([(int) -> int] list) {
    printList(list);
    println("");
}

[(int) -> int] reverse([(int) -> int] list) {
    [(int) -> int] reversed;
    reversed = zeros();
    int i = 0;
    while (true) {
        if (list(i) == 0) {
            return reversed;
        }
        reversed = add(list(i), reversed);
        i++;
    }
}

[(int) -> int] map([(int) -> int] f, [(int) -> int] list) {
    return lambda (int n) -> int {
        if (list(n) == 0) {
            return 0;
        }
        else {
            return f(list(n));
        }
    };
}

[(int) -> int] filter([(int) -> bool] f, [(int) -> int] list) {
    return lambda (int n) -> int {
        if (list(n) == 0) {
            return 0;
        }
        else {
            if (f(list(n))) {
                return list(n);
            }
            else {
                return (filter(f, tail(list)))(n);
            }
        }
    };
}

[(int) -> int] foldl([(int, int) -> int] f, int x, [(int) -> int] list) {
    if (head(list) == 0) {
        return x;
    }
    else {
        return foldl(f, f(x, head(list)), tail(list));
    }
}

[(int) -> int] foldr([(int, int) -> int] f, int x, [(int) -> int] list) {
    if (list(0) == 0) {
        return x;
    }
    else {
        return f(list(0), foldr(f, x, tail(list)));
    }
}

[(int) -> int] take(int n, [(int) -> int] list) {
    return lambda (int i) -> int {
        if (i < n) {
            return list(i);
        }
        else {
            return 0;
        }
    };
}

[(int) -> int] drop(int n, [(int) -> int] list) {
    return lambda (int i) -> int . list(i + n);
}

[(int) -> int] zipWith([(int, int) -> int] f, [(int) -> int] list1, [(int) -> int] list2) {
    return lambda (int n) -> int {
        if (list1(n) == 0 || list2(n) == 0) {
            return 0;
        }
        else {
            return f(list1(n), list2(n));
        }
    };
}

[(int) -> int] iterate([(int) -> int] f, int x) {
    return lambda (int n) -> int {
        if (n == 0) {
            return x;
        }
        else {
            return (iterate(f, f(x)))(n - 1);
        }
    };
}

int identity(int x) {
    return x;
}

[(int) -> int] repeat(int x) {
    return iterate(lambda (int x) -> int . x, x);
}

[(int) -> int] cycle([(int) -> int] list) {
    return lambda (int n) -> int {
        return list(n % length(list));
    };
}

[(int) -> int] replicate(int n, int x) {
    return take(n, repeat(x));
}

[(int) -> int] nats = iterate(lambda (int n) -> int . n + 1, 1);

int fib(int n) {
    int a = 1;
    int b = 1;
    int i = 0;
    while (i < n) {
        int c = a + b;
        a = b;
        b = c;
        i++;
    }
    return a;
}

[(int) -> int] fibs = map(lambda (int n) -> int . fib(n), nats);

int main() {
    print("fibs: ");
    printlnList(take(10, fibs));

    print("nats squared:");
    printlnList(take(10, map(lambda (int x) -> int . x * x, nats)));

    [(int, int) -> int] sum = lambda (int x, int y) -> int . x + y;

    [(int) -> int] list = zipWith(sum, fibs, nats);
    print("fibs + nats:");
    printlnList(take(10, list));

    print("sum of the first 100 nats: ");
    println(foldr(sum, 0, take(100, nats)));

    return 0;
}