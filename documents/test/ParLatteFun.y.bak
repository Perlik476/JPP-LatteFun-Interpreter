-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module ParLatteFun
  ( happyError
  , myLexer
  , pProgram
  ) where

import Prelude

import qualified AbsLatteFun
import LexLatteFun

}

%name pProgram Program
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!'      { PT _ (TS _ 1)  }
  '!='     { PT _ (TS _ 2)  }
  '%'      { PT _ (TS _ 3)  }
  '&&'     { PT _ (TS _ 4)  }
  '('      { PT _ (TS _ 5)  }
  ')'      { PT _ (TS _ 6)  }
  '*'      { PT _ (TS _ 7)  }
  '+'      { PT _ (TS _ 8)  }
  '++'     { PT _ (TS _ 9)  }
  ','      { PT _ (TS _ 10) }
  '-'      { PT _ (TS _ 11) }
  '--'     { PT _ (TS _ 12) }
  '->'     { PT _ (TS _ 13) }
  '.'      { PT _ (TS _ 14) }
  '/'      { PT _ (TS _ 15) }
  ';'      { PT _ (TS _ 16) }
  '<'      { PT _ (TS _ 17) }
  '<='     { PT _ (TS _ 18) }
  '='      { PT _ (TS _ 19) }
  '=='     { PT _ (TS _ 20) }
  '>'      { PT _ (TS _ 21) }
  '>='     { PT _ (TS _ 22) }
  '['      { PT _ (TS _ 23) }
  ']'      { PT _ (TS _ 24) }
  'bool'   { PT _ (TS _ 25) }
  'else'   { PT _ (TS _ 26) }
  'false'  { PT _ (TS _ 27) }
  'if'     { PT _ (TS _ 28) }
  'int'    { PT _ (TS _ 29) }
  'lambda' { PT _ (TS _ 30) }
  'ref'    { PT _ (TS _ 31) }
  'return' { PT _ (TS _ 32) }
  'string' { PT _ (TS _ 33) }
  'true'   { PT _ (TS _ 34) }
  'void'   { PT _ (TS _ 35) }
  'while'  { PT _ (TS _ 36) }
  '{'      { PT _ (TS _ 37) }
  '||'     { PT _ (TS _ 38) }
  '}'      { PT _ (TS _ 39) }
  'λ'      { PT _ (TS _ 40) }
  L_Ident  { PT _ (TV $$)   }
  L_integ  { PT _ (TI $$)   }
  L_quoted { PT _ (TL $$)   }

%%

Ident :: { AbsLatteFun.Ident }
Ident  : L_Ident { AbsLatteFun.Ident $1 }

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

String  :: { String }
String   : L_quoted { $1 }

Program :: { AbsLatteFun.Program }
Program : ListInit { AbsLatteFun.PProgram $1 }

Init :: { AbsLatteFun.Init }
Init
  : Type Ident '(' ListArg ')' Block { AbsLatteFun.IFnDef $1 $2 $4 $6 }
  | Type Ident '=' Expr ';' { AbsLatteFun.IVarDef $1 $2 $4 }

ListInit :: { [AbsLatteFun.Init] }
ListInit : Init { (:[]) $1 } | Init ListInit { (:) $1 $2 }

Arg :: { AbsLatteFun.Arg }
Arg
  : Type Ident { AbsLatteFun.CopyArg $1 $2 }
  | Type 'ref' Ident { AbsLatteFun.RefArg $1 $3 }

ListArg :: { [AbsLatteFun.Arg] }
ListArg
  : {- empty -} { [] }
  | Arg { (:[]) $1 }
  | Arg ',' ListArg { (:) $1 $3 }

Block :: { AbsLatteFun.Block }
Block : '{' ListStmt '}' { AbsLatteFun.SBlock $2 }

ListStmt :: { [AbsLatteFun.Stmt] }
ListStmt : {- empty -} { [] } | Stmt ListStmt { (:) $1 $2 }

Stmt :: { AbsLatteFun.Stmt }
Stmt
  : ';' { AbsLatteFun.SEmpty }
  | Block { AbsLatteFun.SBStmt $1 }
  | Type Ident ';' { AbsLatteFun.SDecl $1 $2 }
  | Init { AbsLatteFun.SInit $1 }
  | Ident '=' Expr ';' { AbsLatteFun.SAss $1 $3 }
  | Ident '++' ';' { AbsLatteFun.SIncr $1 }
  | Ident '--' ';' { AbsLatteFun.SDecr $1 }
  | 'return' Expr ';' { AbsLatteFun.SRet $2 }
  | 'return' ';' { AbsLatteFun.SVRet }
  | 'if' '(' Expr ')' Block { AbsLatteFun.SCond $3 $5 }
  | 'if' '(' Expr ')' Block 'else' Block { AbsLatteFun.SCondElse $3 $5 $7 }
  | 'while' '(' Expr ')' Block { AbsLatteFun.SWhile $3 $5 }
  | Expr ';' { AbsLatteFun.SExp $1 }

Type :: { AbsLatteFun.Type }
Type
  : 'int' { AbsLatteFun.TInt }
  | 'string' { AbsLatteFun.TStr }
  | 'bool' { AbsLatteFun.TBool }
  | 'void' { AbsLatteFun.TVoid }
  | '[' '(' ListType ')' '->' Type ']' { AbsLatteFun.TFun $3 $6 }

ListType :: { [AbsLatteFun.Type] }
ListType
  : {- empty -} { [] }
  | Type { (:[]) $1 }
  | Type ',' ListType { (:) $1 $3 }

Expr6 :: { AbsLatteFun.Expr }
Expr6
  : Ident { AbsLatteFun.EVar $1 }
  | Integer { AbsLatteFun.ELitInt $1 }
  | 'true' { AbsLatteFun.ELitTrue }
  | 'false' { AbsLatteFun.ELitFalse }
  | Ident '(' ListExpr ')' { AbsLatteFun.EApp $1 $3 }
  | '(' Expr ')' '(' ListExpr ')' { AbsLatteFun.EAppLambda $2 $5 }
  | String { AbsLatteFun.EString $1 }
  | '(' Expr ')' { $2 }

Expr5 :: { AbsLatteFun.Expr }
Expr5
  : '-' Expr6 { AbsLatteFun.ENeg $2 }
  | '!' Expr6 { AbsLatteFun.ENot $2 }
  | Expr6 { $1 }

Expr4 :: { AbsLatteFun.Expr }
Expr4
  : Expr4 MulOp Expr5 { AbsLatteFun.EMul $1 $2 $3 } | Expr5 { $1 }

Expr3 :: { AbsLatteFun.Expr }
Expr3
  : Expr3 AddOp Expr4 { AbsLatteFun.EAdd $1 $2 $3 } | Expr4 { $1 }

Expr2 :: { AbsLatteFun.Expr }
Expr2
  : Expr2 RelOp Expr3 { AbsLatteFun.ERel $1 $2 $3 } | Expr3 { $1 }

Expr1 :: { AbsLatteFun.Expr }
Expr1 : Expr2 '&&' Expr1 { AbsLatteFun.EAnd $1 $3 } | Expr2 { $1 }

Expr :: { AbsLatteFun.Expr }
Expr
  : Expr1 '||' Expr { AbsLatteFun.EOr $1 $3 }
  | 'lambda' '(' ListArg ')' '->' Type '.' Expr { AbsLatteFun.ELambdaExpr $3 $6 $8 }
  | 'λ' '(' ListArg ')' '->' Type '.' Expr { AbsLatteFun.ELambdaExpr2 $3 $6 $8 }
  | 'lambda' '(' ListArg ')' '->' Type Block { AbsLatteFun.ELambdaBlock $3 $6 $7 }
  | 'λ' '(' ListArg ')' '->' Type Block { AbsLatteFun.ELambdaBlock2 $3 $6 $7 }
  | Expr1 { $1 }

ListExpr :: { [AbsLatteFun.Expr] }
ListExpr
  : {- empty -} { [] }
  | Expr { (:[]) $1 }
  | Expr ',' ListExpr { (:) $1 $3 }

AddOp :: { AbsLatteFun.AddOp }
AddOp : '+' { AbsLatteFun.OPlus } | '-' { AbsLatteFun.OMinus }

MulOp :: { AbsLatteFun.MulOp }
MulOp
  : '*' { AbsLatteFun.OTimes }
  | '/' { AbsLatteFun.ODiv }
  | '%' { AbsLatteFun.OMod }

RelOp :: { AbsLatteFun.RelOp }
RelOp
  : '<' { AbsLatteFun.OLTH }
  | '<=' { AbsLatteFun.OLE }
  | '>' { AbsLatteFun.OGTH }
  | '>=' { AbsLatteFun.OGE }
  | '==' { AbsLatteFun.OEQU }
  | '!=' { AbsLatteFun.ONE }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

