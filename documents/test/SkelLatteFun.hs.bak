-- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelLatteFun where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsLatteFun

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsLatteFun.Ident -> Result
transIdent x = case x of
  AbsLatteFun.Ident string -> failure x

transProgram :: AbsLatteFun.Program -> Result
transProgram x = case x of
  AbsLatteFun.PProgram inits -> failure x

transInit :: AbsLatteFun.Init -> Result
transInit x = case x of
  AbsLatteFun.IFnDef type_ ident args block -> failure x
  AbsLatteFun.IVarDef type_ ident expr -> failure x

transArg :: AbsLatteFun.Arg -> Result
transArg x = case x of
  AbsLatteFun.CopyArg type_ ident -> failure x
  AbsLatteFun.RefArg type_ ident -> failure x

transBlock :: AbsLatteFun.Block -> Result
transBlock x = case x of
  AbsLatteFun.SBlock stmts -> failure x

transStmt :: AbsLatteFun.Stmt -> Result
transStmt x = case x of
  AbsLatteFun.SEmpty -> failure x
  AbsLatteFun.SBStmt block -> failure x
  AbsLatteFun.SDecl type_ ident -> failure x
  AbsLatteFun.SInit init -> failure x
  AbsLatteFun.SAss ident expr -> failure x
  AbsLatteFun.SIncr ident -> failure x
  AbsLatteFun.SDecr ident -> failure x
  AbsLatteFun.SRet expr -> failure x
  AbsLatteFun.SVRet -> failure x
  AbsLatteFun.SCond expr block -> failure x
  AbsLatteFun.SCondElse expr block1 block2 -> failure x
  AbsLatteFun.SWhile expr block -> failure x
  AbsLatteFun.SExp expr -> failure x

transType :: AbsLatteFun.Type -> Result
transType x = case x of
  AbsLatteFun.TInt -> failure x
  AbsLatteFun.TStr -> failure x
  AbsLatteFun.TBool -> failure x
  AbsLatteFun.TVoid -> failure x
  AbsLatteFun.TFun types type_ -> failure x

transExpr :: AbsLatteFun.Expr -> Result
transExpr x = case x of
  AbsLatteFun.EVar ident -> failure x
  AbsLatteFun.ELitInt integer -> failure x
  AbsLatteFun.ELitTrue -> failure x
  AbsLatteFun.ELitFalse -> failure x
  AbsLatteFun.EApp ident exprs -> failure x
  AbsLatteFun.EAppLambda expr exprs -> failure x
  AbsLatteFun.EString string -> failure x
  AbsLatteFun.ENeg expr -> failure x
  AbsLatteFun.ENot expr -> failure x
  AbsLatteFun.EMul expr1 mulop expr2 -> failure x
  AbsLatteFun.EAdd expr1 addop expr2 -> failure x
  AbsLatteFun.ERel expr1 relop expr2 -> failure x
  AbsLatteFun.EAnd expr1 expr2 -> failure x
  AbsLatteFun.EOr expr1 expr2 -> failure x
  AbsLatteFun.ELambdaExpr args type_ expr -> failure x
  AbsLatteFun.ELambdaExpr2 args type_ expr -> failure x
  AbsLatteFun.ELambdaBlock args type_ block -> failure x
  AbsLatteFun.ELambdaBlock2 args type_ block -> failure x

transAddOp :: AbsLatteFun.AddOp -> Result
transAddOp x = case x of
  AbsLatteFun.OPlus -> failure x
  AbsLatteFun.OMinus -> failure x

transMulOp :: AbsLatteFun.MulOp -> Result
transMulOp x = case x of
  AbsLatteFun.OTimes -> failure x
  AbsLatteFun.ODiv -> failure x
  AbsLatteFun.OMod -> failure x

transRelOp :: AbsLatteFun.RelOp -> Result
transRelOp x = case x of
  AbsLatteFun.OLTH -> failure x
  AbsLatteFun.OLE -> failure x
  AbsLatteFun.OGTH -> failure x
  AbsLatteFun.OGE -> failure x
  AbsLatteFun.OEQU -> failure x
  AbsLatteFun.ONE -> failure x
