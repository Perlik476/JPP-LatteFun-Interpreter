-- File generated by the BNF Converter (bnfc 2.9.4.1).

-- | Program to test parser.
{-# OPTIONS_GHC -Wno-incomplete-patterns #-}

module Main where

import Prelude
import System.Environment ( getArgs )
import System.Exit
import System.IO
import Control.Monad      ( when )
import Interpreter        ( execProgram )
import TypeChecker        ( typeCheck )

import AbsLatteFun
import LexLatteFun
import ParLatteFun
import PrintLatteFun
import SkelLatteFun  ()
import Control.Monad.Reader
import Control.Monad.Except
import Control.Monad.State
import qualified Data.Map as Map
import Data.Maybe

type Err        = Either String
type ParseFun a = [Token] -> Err a
type Verbosity  = Int

putStrV :: Verbosity -> String -> IO ()
putStrV v s = when (v > 1) $ putStrLn s

runFile v p f = readFile f >>= run v p

run v p s =
  case p ts of
    Left err -> do
      hPutStrLn stderr "Parse Failed..."
      hPutStrLn stderr err
      exitFailure
    Right tree -> do
      success <- TypeChecker.typeCheck tree
      if success then
        Interpreter.execProgram tree
      else
        exitFailure
  where
  ts = myLexer s
  showPosToken ((l,c),t) = concat [ show l, ":", show c, "\t", show t ]

showTree :: (Show a, Print a) => Int -> a -> IO ()
showTree v tree = do
  putStrV v $ "\n[Abstract Syntax]\n\n" ++ show tree
  putStrV v $ "\n[Linearized tree]\n\n" ++ printTree tree

usage :: IO ()
usage = do
  putStrLn $ unlines
    [ "usage: Call with one of the following argument combinations:"
    , "  --help          Display this help message."
    , "  (no arguments)  Interpret concent of stdin."
    , "  (file)          Interpret content of a file."
    ]

main :: IO ()
main = do
  args <- getArgs
  case args of
    ["--help"] -> usage
    []         -> getContents >>= run 2 pProgram
    [f]        -> runFile 2 pProgram f
    _          -> usage