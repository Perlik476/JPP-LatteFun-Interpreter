-- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelLatteFun where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsLatteFun

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsLatteFun.Ident -> Result
transIdent x = case x of
  AbsLatteFun.Ident string -> failure x

transProgram :: Show a => AbsLatteFun.Program' a -> Result
transProgram x = case x of
  AbsLatteFun.PProgram _ inits -> failure x

transInit :: Show a => AbsLatteFun.Init' a -> Result
transInit x = case x of
  AbsLatteFun.IFnDef _ type_ ident args block -> failure x
  AbsLatteFun.IVarDef _ type_ ident expr -> failure x

transArg :: Show a => AbsLatteFun.Arg' a -> Result
transArg x = case x of
  AbsLatteFun.CopyArg _ type_ ident -> failure x
  AbsLatteFun.RefArg _ type_ ident -> failure x

transBlock :: Show a => AbsLatteFun.Block' a -> Result
transBlock x = case x of
  AbsLatteFun.SBlock _ stmts -> failure x

transStmt :: Show a => AbsLatteFun.Stmt' a -> Result
transStmt x = case x of
  AbsLatteFun.SEmpty _ -> failure x
  AbsLatteFun.SBStmt _ block -> failure x
  AbsLatteFun.SDecl _ type_ ident -> failure x
  AbsLatteFun.SInit _ init -> failure x
  AbsLatteFun.SAss _ ident expr -> failure x
  AbsLatteFun.SIncr _ ident -> failure x
  AbsLatteFun.SDecr _ ident -> failure x
  AbsLatteFun.SRet _ expr -> failure x
  AbsLatteFun.SVRet _ -> failure x
  AbsLatteFun.SCond _ expr block -> failure x
  AbsLatteFun.SCondElse _ expr block1 block2 -> failure x
  AbsLatteFun.SWhile _ expr block -> failure x
  AbsLatteFun.SExp _ expr -> failure x
  AbsLatteFun.SPrint _ expr -> failure x

transType :: Show a => AbsLatteFun.Type' a -> Result
transType x = case x of
  AbsLatteFun.TInt _ -> failure x
  AbsLatteFun.TStr _ -> failure x
  AbsLatteFun.TBool _ -> failure x
  AbsLatteFun.TVoid _ -> failure x
  AbsLatteFun.TFun _ targs type_ -> failure x
  AbsLatteFun.TAuto _ -> failure x
  AbsLatteFun.TPrint _ -> failure x

transTArg :: Show a => AbsLatteFun.TArg' a -> Result
transTArg x = case x of
  AbsLatteFun.TCopyArg _ type_ -> failure x
  AbsLatteFun.TRefArg _ type_ -> failure x

transExpr :: Show a => AbsLatteFun.Expr' a -> Result
transExpr x = case x of
  AbsLatteFun.EVar _ ident -> failure x
  AbsLatteFun.ELitInt _ integer -> failure x
  AbsLatteFun.ELitTrue _ -> failure x
  AbsLatteFun.ELitFalse _ -> failure x
  AbsLatteFun.EApp _ ident exprs -> failure x
  AbsLatteFun.EAppLambda _ expr exprs -> failure x
  AbsLatteFun.EString _ string -> failure x
  AbsLatteFun.ENeg _ expr -> failure x
  AbsLatteFun.ENot _ expr -> failure x
  AbsLatteFun.EMul _ expr1 mulop expr2 -> failure x
  AbsLatteFun.EAdd _ expr1 addop expr2 -> failure x
  AbsLatteFun.ERel _ expr1 relop expr2 -> failure x
  AbsLatteFun.EAnd _ expr1 expr2 -> failure x
  AbsLatteFun.EOr _ expr1 expr2 -> failure x
  AbsLatteFun.ELambdaExpr _ args type_ expr -> failure x
  AbsLatteFun.ELambdaBlock _ args type_ block -> failure x

transAddOp :: Show a => AbsLatteFun.AddOp' a -> Result
transAddOp x = case x of
  AbsLatteFun.OPlus _ -> failure x
  AbsLatteFun.OMinus _ -> failure x

transMulOp :: Show a => AbsLatteFun.MulOp' a -> Result
transMulOp x = case x of
  AbsLatteFun.OTimes _ -> failure x
  AbsLatteFun.ODiv _ -> failure x
  AbsLatteFun.OMod _ -> failure x

transRelOp :: Show a => AbsLatteFun.RelOp' a -> Result
transRelOp x = case x of
  AbsLatteFun.OLTH _ -> failure x
  AbsLatteFun.OLE _ -> failure x
  AbsLatteFun.OGTH _ -> failure x
  AbsLatteFun.OGE _ -> failure x
  AbsLatteFun.OEQU _ -> failure x
  AbsLatteFun.ONE _ -> failure x
